version: '3'

volumes:
  kongX_data:
      driver: local
  kongY_data:
      driver: local
  keycloak_data:
      driver: local

services:
  traefik:
    image: traefik:v2.2
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      default:
        aliases:
          # This allows the other containers to also reach the services through
          # this public address (as opposed to using hostnames)
          - kongX.localhost
          - kongY.localhost
          - keycloak.localhost

  # Kong
  kongX-migrations:
    image: kong:2.0.2-centos-oidc
    command: kong migrations bootstrap
    depends_on:
      - kongX-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongX-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    restart: on-failure

  kongX-migrations-up:
    image: kong:2.0.2-centos-oidc
    command: kong migrations up && kong migrations finish
    depends_on:
      - kongX-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongX-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    restart: on-failure

  kongX:
    build: ./compose/kong
    image: kong:2.0.2-centos-oidc
    user: "${KONG_USER:-kong}"
    depends_on:
      - kongX-db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongX-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: oidc
    ports:
      - "8001:8001/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kongX.rule=HostRegexp(`kongX.localhost`, `{subdomain:[a-z0-9]+}.kongX.localhost`)"
      - "traefik.http.routers.kongX.tls=true"
      - "traefik.http.routers.kongX.tls.domains[0].main=kongX.localhost"
      - "traefik.http.routers.kongX.entrypoints=websecure"
      - "traefik.http.services.kongX.loadbalancer.server.port=8000"

  kongX-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kongX_data:/var/lib/postgresql/data

  kongY-migrations:
    image: kong:2.0.2-centos-oidc
    command: kong migrations bootstrap
    depends_on:
      - kongY-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongY-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    restart: on-failure

  kongY-migrations-up:
    image: kong:2.0.2-centos-oidc
    command: kong migrations up && kong migrations finish
    depends_on:
      - kongY-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongY-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
    restart: on-failure

  kongY:
    build: ./compose/kong
    image: kong:2.0.2-centos-oidc
    user: "${KONG_USER:-kong}"
    depends_on:
      - kongY-db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PG_HOST: kongY-db
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PLUGINS: oidc
    ports:
      - "9001:8001/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kongY.rule=HostRegexp(`kongY.localhost`, `{subdomain:[a-z0-9]+}.kongY.localhost`)"
      - "traefik.http.routers.kongY.tls=true"
      - "traefik.http.routers.kongY.tls.domains[0].main=kongY.localhost"
      - "traefik.http.routers.kongY.entrypoints=websecure"
      - "traefik.http.services.kongY.loadbalancer.server.port=8000"

  kongY-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kongY_data:/var/lib/postgresql/data

  konga:
    image: pantsel/konga:0.14.7
    ports:
      - "1337:1337"
    volumes:
      - ./compose/konga/connections.data:/connections.data
    environment:
      NO_AUTH: "true"
      KONGA_SEED_KONG_NODE_DATA_SOURCE_FILE: /connections.data

  keycloak-db:
    image: postgres
    volumes:
      - keycloak_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  keycloak:
    image: quay.io/keycloak/keycloak:12.0.1
    depends_on:
      - keycloak-db
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: keycloak-db
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: password
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.keycloak.rule=HostSNI(`keycloak.localhost`)"
      - "traefik.tcp.routers.keycloak.tls.passthrough=true"
      - "traefik.tcp.routers.keycloak.entrypoints=websecure"
      - "traefik.tcp.services.keycloak.loadbalancer.server.port=8443"

  petstore-envoy:
    build: ./compose/envoy
    volumes:
      - ./compose/envoy/envoy.yaml:/config/envoy.yaml
    environment:
      - DEBUG_LEVEL=info
      - SERVICE_NAME=petstore-api
      - SERVICE_PORT=8080
      - OPA_HOST=petstore-opa

  petstore-opa:
    image: openpolicyagent/opa:0.25.2-envoy
    volumes:
      - ./compose/petstore/policy.rego:/config/policy.rego
    command:
      - "run"
      - "--log-level=debug"
      - "--log-format=json-pretty"
      - "--server"
      - "--set=plugins.envoy_ext_authz_grpc.addr=:9191"
      - "--set=decision_logs.console=true"
      - "/config/policy.rego"

  petstore-api:
    image: openapitools/openapi-petstore
    environment:
      - OPENAPI_BASE_PATH=/v3
      - DISABLE_API_KEY=1
      - DISABLE_OAUTH=1

  myservice-envoy:
    build: ./compose/envoy
    volumes:
      - ./compose/envoy/envoy.yaml:/config/envoy.yaml
    environment:
      - DEBUG_LEVEL=info
      - SERVICE_NAME=myservice-api
      - SERVICE_PORT=80
      - OPA_HOST=myservice-opa

  myservice-opa:
    image: openpolicyagent/opa:0.25.2-envoy
    volumes:
      - ./compose/myservice/policy.rego:/config/policy.rego
    command:
      - "run"
      - "--log-level=debug"
      - "--log-format=json-pretty"
      - "--server"
      - "--set=plugins.envoy_ext_authz_grpc.addr=:9191"
      - "--set=decision_logs.console=true"
      - "/config/policy.rego"

  myservice-api:
    build: ./compose/myservice
